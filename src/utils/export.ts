// Export utilities for analysis results
import type { AnalysisRequest, ProfileAnalysisRequest } from '../types/api';
import { formatDate } from './formatters';

type AnalysisType = AnalysisRequest | ProfileAnalysisRequest;

/**
 * Export analysis as JSON file
 */
export function exportAsJSON(analysis: AnalysisType, filename?: string) {
  const data = JSON.stringify(analysis, null, 2);
  const blob = new Blob([data], { type: 'application/json' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = filename || `zlyzer-analysis-${analysis.id}.json`;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
}

/**
 * Export analysis as plain text file
 */
export function exportAsText(analysis: AnalysisType, filename?: string) {
  const isProfile = 'profileHandle' in analysis;
  const summaryText = isProfile
    ? analysis.profileResult?.analysisResult || analysis.result?.analysisResult || 'No analysis available'
    : analysis.result?.analysisResult || 'No analysis available';

  const text = `
═══════════════════════════════════════════════
ZLYZER ${isProfile ? 'PROFILE' : 'VIDEO'} ANALYSIS REPORT
═══════════════════════════════════════════════

Analysis ID: ${analysis.id}
Status: ${analysis.status}
Created: ${formatDate(analysis.createdAt)}
${isProfile ? `Profile: ${(analysis as ProfileAnalysisRequest).profileHandle || analysis.url}` : `Video URL: ${analysis.url}`}
${analysis.customPrompt ? `Custom Prompt: ${analysis.customPrompt}` : ''}

───────────────────────────────────────────────
ANALYSIS RESULTS
───────────────────────────────────────────────

${summaryText}

───────────────────────────────────────────────
Generated by Zlyzer - TikTok Analytics Platform
═══════════════════════════════════════════════
  `.trim();

  const blob = new Blob([text], { type: 'text/plain;charset=utf-8' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = filename || `zlyzer-analysis-${analysis.id}.txt`;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
}

/**
 * Copy analysis text to clipboard
 */
export async function copyToClipboard(text: string): Promise<boolean> {
  try {
    if (navigator.clipboard && window.isSecureContext) {
      await navigator.clipboard.writeText(text);
      return true;
    } else {
      // Fallback for older browsers or insecure contexts
      const textArea = document.createElement('textarea');
      textArea.value = text;
      textArea.style.position = 'fixed';
      textArea.style.left = '-999999px';
      textArea.style.top = '-999999px';
      document.body.appendChild(textArea);
      textArea.focus();
      textArea.select();
      const successful = document.execCommand('copy');
      document.body.removeChild(textArea);
      return successful;
    }
  } catch (err) {
    console.error('Failed to copy to clipboard:', err);
    return false;
  }
}

